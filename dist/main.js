#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs-extra");
var serializer = require("js-yaml");
var program = require("commander");
var jsonTraverse_1 = require("./jsonTraverse");
var postTransformer_1 = require("./postTransformer");
var tocGenerator_1 = require("./tocGenerator");
var packageGenerator_1 = require("./packageGenerator");
var idResolver_1 = require("./idResolver");
var constants_1 = require("./common/constants");
var flags_1 = require("./common/flags");
var pjson = require('../package.json');
var path;
var outputPath;
var repoConfigPath;
program
    .version("v" + pjson.version)
    .description('A tool to convert the json format api file generated by TypeDoc to yaml format output files for docfx.')
    .option('--hasModule', 'Add the option if the source repository contains module')
    .option('--disableAlphabetOrder', 'Add the option if you want to disable the alphabet order in output yaml')
    .option('--basePath [value]', 'Current base path to the repository')
    .arguments('<inputFile> <outputFolder> [repoConfigureFile]')
    .action(function (input, output, repoConfig) {
    path = input;
    outputPath = output;
    repoConfigPath = repoConfig;
})
    .parse(process.argv);
if (!path || !outputPath) {
    console.log('Error: The input file path and output folder path is not specified!');
    program.help();
}
var repoConfig;
if (repoConfigPath && program.basePath) {
    if (fs.existsSync(repoConfigPath)) {
        var temp = JSON.parse(fs.readFileSync(repoConfigPath).toString());
        repoConfig = {
            repo: temp.repo,
            branch: temp.branch,
            basePath: program.basePath
        };
    }
    else {
        console.log("Error: repository config file path {" + repoConfigPath + "} doesn't exit!");
        program.help();
    }
}
if (program.hasModule) {
    flags_1.flags.hasModule = true;
}
if (program.disableAlphabetOrder) {
    flags_1.flags.enableAlphabetOrder = false;
}
var json = null;
if (fs.existsSync(path)) {
    var dataStr = fs.readFileSync(path).toString();
    json = JSON.parse(dataStr);
}
else {
    console.error('Api doc file ' + path + ' doesn\'t exist.');
    program.help();
}
var rootElements = [];
var uidMapping = {};
if (json) {
    jsonTraverse_1.traverse(json, '', rootElements, null, uidMapping, repoConfig);
}
if (rootElements && rootElements.length) {
    idResolver_1.resolveIds(rootElements, uidMapping);
    var index = packageGenerator_1.generatePackage(rootElements);
    index = JSON.parse(JSON.stringify(index));
    fs.writeFileSync(outputPath + "/index.yml", constants_1.yamlHeader + "\n" + serializer.safeDump(index));
    console.log('index genrated.');
    var toc = tocGenerator_1.generateToc(rootElements, index.items[0].uid);
    toc = JSON.parse(JSON.stringify(toc));
    fs.writeFileSync(outputPath + "/toc.yml", serializer.safeDump(toc));
    console.log('toc genrated.');
    console.log('Yaml dump start.');
    rootElements.forEach(function (rootElement) {
        if (rootElement.uid.indexOf('constructor') >= 0) {
            return;
        }
        var transfomredClass = postTransformer_1.postTransform(rootElement);
        // silly workaround to avoid issue in js-yaml dumper
        transfomredClass = JSON.parse(JSON.stringify(transfomredClass));
        var filename = null;
        if (rootElement.module) {
            filename = rootElement.module.replace(/\//g, '.') + "." + rootElement.name;
        }
        else {
            filename = rootElement.name;
        }
        filename = filename.split('(')[0];
        console.log("Dump " + outputPath + "/" + filename + ".yml");
        fs.writeFileSync(outputPath + "/" + filename + ".yml", constants_1.yamlHeader + "\n" + serializer.safeDump(transfomredClass));
    });
    console.log('Yaml dump end.');
}
